// <auto-generated />
using System;
using EnumMapping;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EnumMapping.Migrations
{
    [DbContext(typeof(SomeDataContext))]
    [Migration("20190730064931_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EnumMapping.LookupValue", b =>
                {
                    b.Property<int>("LookupValueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomValue")
                        .IsRequired();

                    b.HasKey("LookupValueId");

                    b.ToTable("LookupValues");

                    b.HasData(
                        new
                        {
                            LookupValueId = 1,
                            CustomValue = "One"
                        },
                        new
                        {
                            LookupValueId = 2,
                            CustomValue = "Two"
                        },
                        new
                        {
                            LookupValueId = 3,
                            CustomValue = "Three"
                        });
                });

            modelBuilder.Entity("EnumMapping.SomeData", b =>
                {
                    b.Property<int>("SomeDataId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomValue")
                        .IsRequired();

                    b.Property<string>("Text")
                        .HasMaxLength(20);

                    b.HasKey("SomeDataId");

                    b.ToTable("SampleData");

                    b.HasData(
                        new
                        {
                            SomeDataId = 1,
                            CustomValue = "One",
                            Text = "hello"
                        },
                        new
                        {
                            SomeDataId = 2,
                            CustomValue = "Two",
                            Text = "world"
                        });
                });

            modelBuilder.Entity("EnumMapping.SomeData2", b =>
                {
                    b.Property<int>("SomeData2Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LookupValueId");

                    b.Property<string>("Text");

                    b.HasKey("SomeData2Id");

                    b.HasIndex("LookupValueId");

                    b.ToTable("SomeData2");

                    b.HasData(
                        new
                        {
                            SomeData2Id = 1,
                            LookupValueId = 1,
                            Text = "hello"
                        },
                        new
                        {
                            SomeData2Id = 2,
                            LookupValueId = 2,
                            Text = "world"
                        });
                });

            modelBuilder.Entity("EnumMapping.SomeData2", b =>
                {
                    b.HasOne("EnumMapping.LookupValue", "LookupValue")
                        .WithMany("SomeData2")
                        .HasForeignKey("LookupValueId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
